<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html as HtmlUtility;
/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_social_user_password_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['mail']['#prefix'] = '<div class="help-block">';
  $form['mail']['#suffix'] = '</div>';
}

function socialbase_form_social_post_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_post']['#prefix'] = '<div class="form-group">';
  $form['field_post']['#suffix'] = '</div>';
  $form['field_visibility']['#prefix'] = '<div class="form-group media"><div class="media-body">';
  $form['field_visibility']['#suffix'] = '</div>';
  $form['actions']['#prefix'] = '<div class="media-right">';
  $form['actions']['#suffix'] = '</div></div>';
}

function socialbase_form_comment_post_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['field_comment_body']['#prefix'] = '<div class="media-body"><div class="form-group form-group-inline clearfix text-right">';
  $form['actions']['submit']['#suffix'] = '</div></div>';
  $style = &$form['actions']['submit']['#button_type'];
  $style = array_filter($style , function($e){
    return $e != 'primary';
  });
  $form['actions']['submit']['#button_type'] = 'flat';

}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Select the page layout a / b /c template based on the current route.
 */
function socialbase_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Default page suggestion.
  $page_suggestion = 'page__layout_a';

  // Add your page mapping here. Please note:
  // If there are multiple matches layout_c will always have priority.
  $suggestions_mapping = array(
    'layout_b' => array(
      'page__node__topic',
      'page__user',
    ),
    'layout_c' => array(
      'page__node__enrollments',
      'page__node_edit',
    ),
  );

  if (!empty(array_intersect($suggestions_mapping['layout_c'], $suggestions))) {
    $page_suggestion = 'page__layout_c';
  }
  elseif (!empty(array_intersect($suggestions_mapping['layout_b'], $suggestions))) {
    $page_suggestion = 'page__layout_b';
  }
  // Add as second to last suggestion, so it can be overriden on specific pages.
  array_unshift($suggestions, $page_suggestion);
}

/**
 * Helper function to call all the process functions of a hook.
 *
 * @param $hook string function to preprocess (e.g. page).
 * @param $variables array template variables to handle.
 *
 * @see socialbase_preprocess_page_layout_a();
 */
function _socialbase_call_preprocess_page($hook, &$variables) {
  $theme_registry = theme_get_registry();
  if (isset($theme_registry['page']['preprocess functions'])) {
    foreach ($theme_registry['page']['preprocess functions'] as $preprocessor_function) {
      if (function_exists($preprocessor_function)) {
        $preprocessor_function($variables, $hook, $theme_registry['page']);
      }
    }
  }
}


/**
 * Implements hook_preprocess_block().
 */
function socialbase_preprocess_block(&$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array(
      '',
      '_'
    ), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#parents'][0])) {
    $hook = HtmlUtility::escape($variables['element']['#parents'][0]);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== false) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'dropdown';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== false) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'dropdown';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */

function socialbase_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'view') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'view';
  }
  if ($variables['element']['#parents'][0] == 'field_post_wrapper') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'post';
  }
  if ($variables['element']['#parents'][0] == 'field_comment_body_wrapper' || $variables['element']['submit']['#button_type'] == 'flat' ) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'comment_form';
  }
}

/**
 * Implements hook_preprocess_page().
 */

function socialbase_preprocess_page(&$variables) {
  // if we have the admin toolbar on our screen we need overrides for our styles.
  if ($variables['is_admin']) {
    $variables['#attached']['library'][] = 'socialbase/admin';
  }
}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */
function socialbase_preprocess_page_layout_a(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);

}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */

function socialbase_preprocess_page_layout_b(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);
}

/**
 * Implements socialbase_preprocess_page_layout_a().
 */

function socialbase_preprocess_page_layout_c(&$variables) {
  _socialbase_call_preprocess_page('page', $variables);
}

/**
 * Implements hook_theme().
 *
 * Bit of hacking to be able to call multiple page layout templates based on
 * routes.
 *
 * See @socialbase_theme_suggestions_menu_alter().
 */
function socialbase_theme() {
  $items = array();
  $items['page_layout_a'] = array(
    'template' => 'page--layout-a',
    'render element' => 'page',
    'base hook' => 'page',
  );
  $items['page_layout_b'] = array(
    'template' => 'page--layout-b',
    'render element' => 'page',
    'base hook' => 'page',
  );
  $items['page_layout_c'] = array(
    'template' => 'page--layout-c',
    'render element' => 'page',
    'base hook' => 'page',
  );
  return $items;
}

/**
 * Prepares variables for node templates.
 *
 * Default template: node.html.twig.
 *
 * Most themes use their own copy of node.html.twig. The default is located
 * inside "/core/modules/node/templates/node.html.twig". Look in there for the
 * full list of variables.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - node: The node object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function socialbase_preprocess_node(&$variables) {
  // Only add submitted data on teasers since we have the page hero block.
  if ($variables['view_mode'] === 'teaser') {
    $variables['display_submitted'] = TRUE;
  }
  if ($variables['view_mode'] === 'hero') {
    unset($variables['label']);
  }

  // Try to add unpublished as a article class for now when nodes are published
  // or unpublished.
  if ($variables['view_mode'] === 'teaser' || $variables['view_mode'] === 'full') {
    if (!$variables['elements']['#node']->isPublished()) {
      $variables['attributes']['class'][] = 'unpublished';
    }
  }

  if ($variables['view_mode'] === 'small_teaser') {
    $date = $variables['node']->getCreatedTime();
    $variables['date'] = \Drupal::service('date.formatter')->format($date, 'day_month');
  }

}

/**
 * Implements template_preprocess_image_style().
 */
function socialbase_preprocess_image_style(&$variables) {
  if($variables['style_name'] == 'profile_hero'){
    $variables['image']['#attributes']['class'][] = 'img-bordered';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
  if($variables['style_name'] == 'micro'){
    $variables['image']['#attributes']['class'][] = 'img-small';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
}

/**
 * @param $variables
 */
function socialbase_preprocess_form_element_label(&$variables) {
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      if (isset($variables['element']['#attributes']['title'])) {
        $description = $variables['element']['#attributes']['title'];
        $variables['element']['#attributes'] = [];
        $variables['description'] = $description;
      }
      // Set the materialize icon.
      $variables['material_icon'] = _socialbase_get_visibility_icon($variables['element']['#title']);
    }
  }
}

/**
 * @param $variables
 */
function socialbase_preprocess_input(&$variables) {
  if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'radio') {
    // Only reaction on the visibility field.
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      $title = $variables['element']['#title'];
      $variables['selected_material_icon'] = _socialbase_get_visibility_icon($title);
      if (isset($variables['element']['#return_value']) && isset($variables['element']['#default_value'])) {
        if ($variables['element']['#return_value'] === $variables['element']['#default_value']) {
          $variables['element']['active'] = 'active';
          $variables['active'] = 'active';
        }
      }
    }
  }
}

/**
 * @param $variables
 */
function socialbase_preprocess_dropdown(&$variables) {
  if (isset($variables['active']) && is_numeric($variables['active'])) {
    $title = $variables['element'][$variables['active']]['#title'];
    $selected_material_icon = _socialbase_get_visibility_icon($title);
  }
  $variables['selected_material_icon'] = isset($selected_material_icon) ? $selected_material_icon : '';
}

/**
 * Helper function to retrieve the icon string for a visibility title.
 *
 * @param $title $string
 * @return string $icon
 */
function _socialbase_get_visibility_icon($title) {

  // Set the materialize icon.
  switch ($title) {
    case 'Community':
      $icon = 'group';
      break;

    case 'Recipient':
      $icon = 'group';
      break;

    default:
      $icon = strtolower(HtmlUtility::escape($title));
  }

  return $icon;
}

function socialbase_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'social_user_login_form' || $variables['element']['#form_id'] == 'user_register_form' || $variables['element']['#form_id'] == 'social_user_password_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . '__user_anonymous';
  }

  if ($variables['element']['#form_id'] == 'comment_post_comment_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'post_comment';
  }

}

function socialbase_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#parents'][0] == 'field_comment_body') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'comment';
  }

}

/**
 * Allows sub-themes to alter the array used for colorizing text.
 *
 * @param array $texts
 *   An associative array containing the text and classes to be matched, passed
 *   by reference.
 *
 * @see \Drupal\bootstrap\Bootstrap::cssClassFromString()
 */
function socialbase_bootstrap_colorize_text_alter(&$texts) {

  $texts = [

    // Text that match these specific strings are checked first.
    'matches' => [
      // Primary class.
      t('Create new account')->render()   => 'primary',
      t('Log in')->render()               => 'primary',
    ],

    // Text containing these words anywhere in the string are checked last.
    'contains' => [
      t('Submit')->render()               => 'primary',
    ],

  ];
}


/**
 * Allows sub-themes to alter the array used for associating an icon with text.
 *
 * @param array $texts
 *   An associative array containing the text and icons to be matched, passed
 *   by reference.
 *
 * @see \Drupal\bootstrap\Bootstrap::glyphiconFromString()
 */
function socialbase_bootstrap_iconize_text_alter(&$texts) {

  $texts = [

    // Text that match these specific strings are checked first.
    'matches' => [
    ],

    // Text containing these words anywhere in the string are checked last.
    'contains' => [
      t('Save')->render()       => '',
    ],

  ];

}
